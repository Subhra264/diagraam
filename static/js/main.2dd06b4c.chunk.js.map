{"version":3,"sources":["utils/loadShapes.js","components/ComponentList/ComponentList.jsx","components/ComponentMetaEditor/ComponentMetaEditor.jsx","components/DiagramEditor/DiagramEditor.jsx","components/AppWrapper/AppWrapper.jsx","utils/Types.js","assets/icons/ArchitectureIcon.svg","assets/icons/DecisionTreeIcon.svg","components/NavBar/Export/Export.jsx","components/NavBar/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["SHAPE_FILL_COLOR","ComponentSelector","props","componentListRef","useRef","useEffect","editorGraph","editorPaper","shapesContainerRef","componentListGraph","dia","Graph","componentListPaper","Paper","el","current","model","background","color","width","height","interactive","rectangleShape","shapes","standard","Rectangle","position","x","y","size","attrs","body","fill","stroke","rx","ry","label","text","circleShape","Circle","cylinderShape","Cylinder","top","ellipseShape","Ellipse","polygonShape","Polygon","refPoints","headeredRectangleShape","HeaderedRectangle","header","headerText","bodyText","imageShape","Image","image","xlinkHref","embeddedImageShape","EmbeddedImage","inscribedImageShape","InscribedImage","pathShape","Path","refD","addCells","on","cellView","e","bodyElement","document","flyPaperElementDiv","createElement","id","style","append","flyPaperElement","getElementById","flyGraph","flyShape","clone","pos","offset","addCell","bodyMouseMoveHandler","left","pageX","pageY","addEventListener","bodyMouseUpHandler","target","$el","s","resize","removeEventListener","remove","loadShapes","className","ref","ComponentMetaEditor","cellType","cellSize","Object","keys","map","cellSizeField","type","value","onChange","ev","setCellSize","oldCellSize","oldCellSize_","changeCellSize","cellMetaData","cellMetaDataKey","attrKeyField","setCellMetaData","oldCellMetaData","oldCellMetaData_","console","log","changeFieldValue","DiagramEditor","canvas","useState","currentId","setCurrentId","graph","paper","gridSize","drawGrid","name","args","thickness","frozen","snapLinks","linkPinning","defaultLink","Link","async","connectionStrategy","connectionStrategies","pinAbsolute","setEditorGraph","setEditorPaper","verticesLinkTool","linkTools","Vertices","segmentsLinkTool","Segments","removeLinkButton","Remove","linkToolsView","ToolsView","tools","removeElemTool","elementTools","linkgenerationbutton","Button","extend","options","markup","tagName","selector","attributes","rotate","action","evt","elementView","buttonView","link","source","anchor","set","addTo","elemToolsView","resetAll","this","cell","isElement","elemType","split","setCellType","isLink","attr","line","highlighters","mask","add","padding","deep","layer","pointerclick","get","linkView","removeTools","addTools","linkmodel","getSourceElement","getTargetElement","models","findModelsFromPoint","length","elems","getElements","i","elemView","findViewByModel","links","getLinks","unfreeze","getCell","AppWrapper","ExportType","JSON","DiagramType","_extends","assign","arguments","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","d","SvgArchitectureIcon","_ref","svgRef","title","titleId","viewBox","xmlns","ForwardRef","SvgDecisionTreeIcon","Export","showExportMenu","setShowExportMenu","hiddenDownloadButton","onClick","exportType","outputJSON","outputContent","toJSON","stringify","outputBlob","Blob","outputFileURL","URL","createObjectURL","href","download","click","exportAs","NavBar","navBarLeftIcons","icon","diagramType","setDiagramType","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2dd06b4c.chunk.js","sourcesContent":["import { dia, shapes } from 'jointjs';\r\n\r\nconst SHAPE_FILL_COLOR = '#333337'; //'#1E1B31';\r\n\r\nexport default function loadShapes (shapesContainerRef, editorGraph, editorPaper) {\r\n    const componentListGraph = new dia.Graph();\r\n    const componentListPaper = new dia.Paper({\r\n        el: shapesContainerRef.current,\r\n        model: componentListGraph,\r\n        background: {\r\n            color: '#1a253a',\r\n        },\r\n        width: '100%',\r\n        height: 450,\r\n        interactive: false\r\n    });\r\n\r\n    const rectangleShape = new shapes.standard.Rectangle({\r\n        position: { x: 10, y: 10 },\r\n        size: { width: 75, height: 50 },\r\n        attrs: {\r\n            body: {\r\n                fill: SHAPE_FILL_COLOR,\r\n                stroke: null,\r\n                rx: 10,\r\n                ry: 10\r\n            },\r\n            label: {\r\n                text: 'Rectangle',\r\n                fill: 'white'\r\n            }\r\n        }\r\n    });\r\n\r\n    const circleShape = new shapes.standard.Circle({\r\n        position: { x: 110, y: 10 },\r\n        size: { width: 50, height: 50 },\r\n        attrs: {\r\n            body: {\r\n                fill: SHAPE_FILL_COLOR,\r\n                stroke: null,\r\n            },\r\n            label: {\r\n                text: 'Circle',\r\n                fill: 'white'\r\n            }\r\n        }\r\n    });\r\n\r\n    const cylinderShape = new shapes.standard.Cylinder({\r\n        position: { x: 10, y: 75 },\r\n        size: { width: 75, height: 50 },\r\n        attrs: {\r\n            body: {\r\n                fill: SHAPE_FILL_COLOR,\r\n                stroke: null\r\n            },\r\n            top: {\r\n                fill: 'grey'\r\n            },\r\n            label: {\r\n                text: 'Cylinder',\r\n                fill: 'white'\r\n            }\r\n        }\r\n    });\r\n\r\n    const ellipseShape = new shapes.standard.Ellipse({\r\n        position: { x: 110, y: 75 },\r\n        size: { width: 75, height: 50 },\r\n        attrs: {\r\n            body: {\r\n                fill: SHAPE_FILL_COLOR,\r\n                stroke: null\r\n            },\r\n            label: {\r\n                text: 'Ellipse',\r\n                fill: 'white'\r\n            }\r\n        }\r\n    });\r\n\r\n    const polygonShape = new shapes.standard.Polygon({\r\n        position: { x: 10, y: 160 },\r\n        size: { width: 75, height: 50 },\r\n        attrs: {\r\n            body: {\r\n                fill: SHAPE_FILL_COLOR,\r\n                stroke: null,\r\n                refPoints: '0,10 10,0 20,10 10,20'\r\n            },\r\n            label: {\r\n                text: 'Polygon',\r\n                fill: 'white'\r\n            }\r\n        }\r\n    });\r\n\r\n    const headeredRectangleShape = new shapes.standard.HeaderedRectangle({\r\n        position: { x: 110, y: 140 },\r\n        size: { width: 75, height: 50 },\r\n        attrs: {\r\n            header: {\r\n                fill: 'grey'\r\n            },\r\n            headerText: {\r\n                text: 'Header',\r\n                fill: 'black'\r\n            },\r\n            body: {\r\n                fill: SHAPE_FILL_COLOR,\r\n                stroke: null\r\n            },\r\n            bodyText: {\r\n                text: ''\r\n            }\r\n        }\r\n    });\r\n\r\n    const imageShape = new shapes.standard.Image({\r\n        position: { x: 10, y: 210 },\r\n        size: { width: 75, height: 50 },\r\n        attrs: {\r\n            image: {\r\n                xlinkHref: ''\r\n            },\r\n            body: {\r\n                fill: SHAPE_FILL_COLOR,\r\n                stroke: null\r\n            },\r\n            label: {\r\n                text: 'Image',\r\n                fill: 'white'\r\n            }\r\n        }\r\n    });\r\n\r\n    const embeddedImageShape = new shapes.standard.EmbeddedImage({\r\n        position: { x: 110, y: 210 },\r\n        size: { width: 75, height: 50 },\r\n        attrs: {\r\n            image: {\r\n                xlinkHref: ''\r\n            },\r\n            body: {\r\n                fill: SHAPE_FILL_COLOR,\r\n                stroke: null\r\n            },\r\n            label: {\r\n                text: 'Embedded Image',\r\n                fill: 'white'\r\n            }\r\n        }\r\n    });\r\n\r\n    const inscribedImageShape = new shapes.standard.InscribedImage({\r\n        position: { x: 10, y: 290 },\r\n        size: { width: 75, height: 50 },\r\n        attrs: {\r\n            image: {\r\n                xlinkHref: ''\r\n            },\r\n            body: {\r\n                fill: SHAPE_FILL_COLOR,\r\n                stroke: null\r\n            },\r\n            label: {\r\n                text: 'Inscribed Image',\r\n                fill: 'white'\r\n            }\r\n        }\r\n    });\r\n\r\n    const pathShape = new shapes.standard.Path({\r\n        position: { x: 110, y: 290 },\r\n        size: { width: 75, height: 50 },\r\n        attrs: {\r\n            body: {\r\n                refD: 'M 0 5 10 0 C 20 0 20 20 10 20 L 0 15 Z',\r\n                stroke: 'grey',\r\n                fill: '#00000000'\r\n            },\r\n            label: {\r\n                text: 'Path',\r\n                fill: 'white'\r\n            }\r\n        }\r\n    });\r\n\r\n    componentListGraph.addCells([\r\n        rectangleShape,\r\n        circleShape,\r\n        cylinderShape,\r\n        ellipseShape,\r\n        polygonShape,\r\n        headeredRectangleShape,\r\n        imageShape,\r\n        embeddedImageShape,\r\n        inscribedImageShape,\r\n        pathShape,\r\n    ]);\r\n\r\n    componentListPaper.on('cell:pointerdown', function(cellView, e, x, y) {\r\n        const bodyElement = document.body;\r\n        const flyPaperElementDiv = document.createElement('div');\r\n        flyPaperElementDiv.id = 'flyPaper';\r\n        flyPaperElementDiv.style = 'position:fixed;z-index:100;opacity:0.7;pointer-event:none;';\r\n        bodyElement.append(flyPaperElementDiv);\r\n\r\n        const flyPaperElement = document.getElementById('flyPaper');\r\n        \r\n        let flyGraph = new dia.Graph();\r\n        let flyPaper = new dia.Paper({\r\n            el: flyPaperElement,\r\n            model: flyGraph,\r\n            height: 60,\r\n            width: 80,\r\n            background: {\r\n                color: '#00000000'\r\n            },\r\n            interactive: false\r\n        });\r\n\r\n        let flyShape = cellView.model.clone();\r\n        let pos = cellView.model.position();\r\n        let offset = {\r\n            x: x - pos.x,\r\n            y: y - pos.y\r\n        };\r\n\r\n        flyShape.position(0, 0);\r\n        flyGraph.addCell(flyShape);\r\n        \r\n        const bodyMouseMoveHandler = (e) => {\r\n            flyPaperElement.style.left = e.pageX - offset.x + 'px';\r\n            flyPaperElement.style.top = e.pageY - offset.y + 'px';\r\n        };\r\n        \r\n        const bodyMouseUpHandler = (e) => {\r\n            let x = e.pageX;\r\n            let y = e.pageY;\r\n            let target = editorPaper.$el.offset();\r\n\r\n            // Dropped over paper ?\r\n            if (x > target.left && x < target.left + editorPaper.$el.width() && y > target.top && y < target.top + editorPaper.$el.height()) {\r\n                let s = flyShape.clone();\r\n                s.position(x - target.left - offset.x, y - target.top - offset.y);\r\n                s.resize(120, 80);\r\n                editorGraph.addCell(s);\r\n            }\r\n\r\n            bodyElement.removeEventListener('mousemove', bodyMouseMoveHandler);\r\n            bodyElement.removeEventListener('mouseup', bodyMouseUpHandler);\r\n            \r\n            flyShape.remove();\r\n            flyPaperElement.remove();\r\n        };\r\n        \r\n        bodyMouseMoveHandler(e);\r\n        bodyElement.addEventListener('mousemove', bodyMouseMoveHandler);\r\n        bodyElement.addEventListener('mouseup', bodyMouseUpHandler);\r\n    });\r\n}","import { useRef } from 'react';\r\nimport { useEffect } from 'react/cjs/react.development';\r\nimport loadShapes from '../../utils/loadShapes';\r\nimport './ComponentList.scss';\r\n\r\nexport default function ComponentSelector (props) {\r\n    const componentListRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (props.editorGraph && props.editorPaper) {\r\n            loadShapes(componentListRef, props.editorGraph, props.editorPaper);\r\n        }\r\n    }, [props.editorGraph, props.editorPaper]);\r\n\r\n    return (\r\n        <div className=\"component-selector\">\r\n            <div className=\"shapes-container\">\r\n                <div className=\"shapes-type-heading\">\r\n                    Components\r\n                </div>\r\n                <div className=\"shapes\" ref={componentListRef}>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import './ComponentMetaEditor.scss';\r\n\r\nexport default function ComponentMetaEditor (props) {\r\n\r\n    const changeFieldValue = (ev, cellMetaDataKey, attrKeyField) => {\r\n        props.setCellMetaData(oldCellMetaData => {\r\n            let oldCellMetaData_ = { ...oldCellMetaData };\r\n            console.log('target.cellMetaDataKey', cellMetaDataKey);\r\n            console.log('target.attrKeyField', attrKeyField);\r\n            oldCellMetaData_[cellMetaDataKey][attrKeyField] = ev.target.value;\r\n            \r\n            return oldCellMetaData_;\r\n        });\r\n    };\r\n\r\n    const changeCellSize = (ev, cellSizeField) => {\r\n        props.setCellSize(oldCellSize => {\r\n            let oldCellSize_ = { ...oldCellSize };\r\n            oldCellSize_[cellSizeField] = ev.target.value;\r\n\r\n            return oldCellSize_;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"component-meta-editor\">\r\n        {\r\n            (props.cellType && props.cellType !== 'link') && (\r\n                <div className=\"container\">\r\n                    {\r\n                        props.cellSize && (\r\n                            <div className=\"cell-attr-group\">\r\n                                <h3>Size</h3>\r\n                                <div className=\"underline\"></div>\r\n                                <div className=\"cell-attr-group-fields\">\r\n                                    {\r\n                                        Object.keys(props.cellSize).map(cellSizeField => (\r\n                                            <div className=\"cell-attr-group-fields\">\r\n                                                <div className=\"key-field-name\">{cellSizeField}</div>\r\n                                                <input \r\n                                                    type='number' \r\n                                                    value={props.cellSize[cellSizeField]? props.cellSize[cellSizeField] : ''}\r\n                                                    onChange={(ev) => changeCellSize(ev, cellSizeField)}\r\n                                                />\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        Object.keys(props.cellMetaData).map(cellMetaDataKey => (\r\n                            <div className=\"cell-attr-group\" key={cellMetaDataKey} >\r\n                                <h3>{cellMetaDataKey}</h3>\r\n                                <div className=\"underline\"></div>\r\n                                <div className=\"cell-attr-group-fields\">\r\n                                    {\r\n                                        Object.keys(props.cellMetaData[cellMetaDataKey]).map(attrKeyField => (\r\n                                            <div className=\"cell-attr-key-field-group\" key={attrKeyField}>\r\n                                                {\r\n                                                    !(props.cellMetaData[cellMetaDataKey][attrKeyField] instanceof Object) && (\r\n                                                        <>\r\n                                                            <div className=\"key-field-name\">{attrKeyField}</div>\r\n                                                            <input \r\n                                                                type='text' \r\n                                                                value={props.cellMetaData[cellMetaDataKey][attrKeyField]? props.cellMetaData[cellMetaDataKey][attrKeyField] : ''}\r\n                                                                onChange={(ev) => changeFieldValue(ev, cellMetaDataKey, attrKeyField)}\r\n                                                            />\r\n                                                        </>\r\n                                                    )\r\n                                                }\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport 'jointjs/dist/joint.core.css';\r\nimport { dia, highlighters, linkTools, connectionStrategies, elementTools, shapes } from 'jointjs';\r\n\r\nexport default function DiagramEditor (props) {\r\n    const canvas = useRef(null);\r\n    const [currentId, setCurrentId] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        const graph = new dia.Graph();\r\n        const paper = new dia.Paper({\r\n            el: canvas.current,\r\n            model: graph,\r\n            background: {\r\n                color: '#1B283F'\r\n            },\r\n            width: '100%',\r\n            height: '100%',\r\n            gridSize: 30,\r\n            drawGrid: {\r\n                name: 'mesh',\r\n                args: { color: '#2C2E41', thickness: 1 }, // settings for the primary mesh\r\n            },\r\n            frozen: true,\r\n            snapLinks: true,\r\n            linkPinning: false,\r\n            defaultLink: new shapes.standard.Link(),\r\n            async: true,\r\n            connectionStrategy: connectionStrategies.pinAbsolute,\r\n        });\r\n\r\n        props.setEditorGraph(graph);\r\n        props.setEditorPaper(paper);\r\n\r\n        /******** tools View *********/\r\n\r\n        const verticesLinkTool = new linkTools.Vertices();\r\n        const segmentsLinkTool = new linkTools.Segments();\r\n        const removeLinkButton = new linkTools.Remove();\r\n\r\n        const linkToolsView = new dia.ToolsView({\r\n            name: 'link-tools',\r\n            tools: [verticesLinkTool, segmentsLinkTool, removeLinkButton]\r\n        });\r\n\r\n        const removeElemTool = new elementTools.Remove();\r\n        const LinkGenerateButton = elementTools.Button.extend({\r\n            name: 'link-generate-button',\r\n            options: {\r\n                markup: [{\r\n                    tagName: 'circle',\r\n                    selector: 'button',\r\n                    attributes: {\r\n                        'r': 10,\r\n                        'fill': '#64A0C1',\r\n                        'stroke': 'white',\r\n                        'stroke-width': 1,\r\n                        'cursor': 'pointer'\r\n                    }\r\n                }],\r\n                x: '100%',\r\n                y: '50%',\r\n                offset: {\r\n                    x: 0,\r\n                    y: 0\r\n                },\r\n                rotate: true,\r\n                action: function (evt, elementView, buttonView) {\r\n                    let link = new shapes.standard.Link({\r\n                        label: {\r\n                            text: 'link'\r\n                        }\r\n                    });\r\n                    link.source(elementView.model, {\r\n                        anchor: {\r\n                            name: 'modelCenter'\r\n                        }\r\n                    });\r\n                    link.set('target', { x: evt.pageX, y: evt.pageY });\r\n                    link.addTo(paper.model);\r\n                }\r\n            }\r\n        });\r\n        const linkgenerationbutton = new LinkGenerateButton();\r\n\r\n        const elemToolsView = new dia.ToolsView({\r\n            name: 'element-tools',\r\n            tools: [removeElemTool, linkgenerationbutton]\r\n        });\r\n\r\n        /************ *************/\r\n\r\n        /************** Event Handlers ***************/\r\n\r\n        paper.on('cell:pointerclick', function (cellView) {\r\n            resetAll(this);\r\n            let cell = cellView.model;\r\n            console.log(cell);\r\n            \r\n            setCurrentId(cell.id);\r\n            \r\n            let cellType = cell.isElement()? 'element': 'link';\r\n            if (cellType === 'element') {\r\n                props.setCellMetaData(cell.attributes.attrs);\r\n                props.setCellSize(cell.attributes.size);\r\n\r\n                let elemType = cell.attributes.type.split('.')[1];\r\n                cellType = cellType + '.'+ elemType;\r\n                console.log(elemType, cellType);\r\n            }\r\n\r\n            props.setCellType(cellType);\r\n            if (cell.isLink()) {\r\n                cell.attr({\r\n                    line: {\r\n                        stroke: 'orange'\r\n                    }\r\n                })\r\n                highlighters.mask.add(cellView, { selector: 'root' }, 'my-cell-highlight', {\r\n                    padding: 0,\r\n                    deep: true,\r\n                    layer: 'back',\r\n                    attrs: {\r\n                        'stroke': null\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n            highlighters.mask.add(cellView, { selector: 'root' }, 'my-cell-highlight', {\r\n                padding: 0,\r\n                deep: true,\r\n                layer: 'front',\r\n                attrs: {\r\n                    'stroke': 'orange',\r\n                    'stroke-width': 3\r\n                }\r\n            });\r\n        });\r\n\r\n        paper.on('cell:contextmenu', function (cellView) {\r\n            cellView.pointerclick();\r\n        });\r\n\r\n        paper.on('cell:mouseover', function (cellView) {\r\n            if (highlighters.mask.get(cellView, 'my-cell-highlight')) {\r\n                return;\r\n            }\r\n            let cell = cellView.model;\r\n            if (cell.isLink()) {\r\n                cell.attr({\r\n                    line: {\r\n                        stroke: 'orange'\r\n                    }\r\n                })\r\n                highlighters.mask.add(cellView, { selector: 'root' }, 'my-hover-highlight', {\r\n                    padding: 0,\r\n                    deep: true,\r\n                    layer: 'back',\r\n                    attrs: {\r\n                        'stoke': null\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n            highlighters.mask.add(cellView, { selector: 'root' }, 'my-hover-highlight', {\r\n                padding: 0,\r\n                deep: true,\r\n                layer: 'front',\r\n                attrs: {\r\n                    'stroke': 'orange',\r\n                    'stroke-width': 3\r\n                }\r\n            });\r\n        });\r\n\r\n        paper.on('cell:pointerdown', function (cellView) {\r\n            resetAll(this);\r\n            let cell = cellView.model;\r\n            setCurrentId(cell.id);\r\n            \r\n            let cellType = cell.isElement()? 'element': 'link';\r\n            if (cellType==='element') {\r\n                props.setCellMetaData(cell.attributes.attrs);\r\n                props.setCellSize(cell.attributes.size);\r\n\r\n                let elemType = cell.attributes.type.split('.')[1];\r\n                cellType = cellType + '.'+ elemType;\r\n                console.log(elemType, cellType);\r\n            }\r\n\r\n            props.setCellType(cellType);\r\n            if (cell.isLink()) {\r\n                cell.attr({\r\n                    line: {\r\n                        stroke: 'orange'\r\n                    }\r\n                })\r\n                highlighters.mask.add(cellView, { selector: 'root' }, 'my-cell-highlight', {\r\n                    padding: 0,\r\n                    deep: true,\r\n                    layer: 'back',\r\n                    attrs: {\r\n                        'stoke': null\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n            highlighters.mask.add(cellView, { selector: 'root' }, 'my-cell-highlight', {\r\n                padding: 0,\r\n                deep: true,\r\n                layer: 'front',\r\n                attrs: {\r\n                    'stroke': 'orange',\r\n                    'stroke-width': 3\r\n                }\r\n            });\r\n        });\r\n\r\n        paper.on('cell:mouseout', function (cellView) {\r\n            highlighters.mask.remove(cellView, 'my-hover-highlight');\r\n            let cell = cellView.model;\r\n            if (cell.isLink()) {\r\n                if (!(highlighters.mask.get(cellView, 'my-cell-highlight'))) {\r\n                    cell.attr('line/stroke', '#64A0C1');\r\n                }\r\n            }\r\n        });\r\n\r\n        paper.on('link:pointerclick', function (linkView) {\r\n            paper.removeTools();\r\n            linkView.addTools(linkToolsView);\r\n        });\r\n\r\n        paper.on('link:pointerdown', function (linkView) {\r\n            this.removeTools();\r\n            linkView.addTools(linkToolsView);\r\n        });\r\n\r\n        paper.on('link:pointerup', function (linkView, evt, x, y) {\r\n            let linkmodel = linkView.model;\r\n            if (linkmodel.getSourceElement() && linkmodel.getTargetElement()) {\r\n                return;\r\n            }\r\n            let models = graph.findModelsFromPoint({ x: x, y: y });\r\n            if (models.length) {\r\n                let model = models[0];\r\n                linkmodel.target(model);\r\n            }\r\n        });\r\n\r\n        paper.on('element:pointerclick', function (elementView) {\r\n            this.removeTools();\r\n            elementView.addTools(elemToolsView);\r\n        });\r\n\r\n        paper.on('element:pointerdown', function (elementView) {\r\n            this.removeTools();\r\n            elementView.addTools(elemToolsView);\r\n        });\r\n\r\n        paper.on('blank:pointerclick', function () {\r\n            resetAll(this);\r\n            paper.removeTools();\r\n            props.setCellType(null);\r\n            setCurrentId(null);\r\n        });\r\n        /****************************************/\r\n\r\n        const resetAll = paper => {\r\n            let elems = paper.model.getElements();\r\n            for (let i = 0; i < elems.length; i++) {\r\n                let elemView = paper.findViewByModel(elems[i]);\r\n                highlighters.mask.remove(elemView);\r\n            }\r\n            let links = paper.model.getLinks();\r\n            for (let i=0; i< links.length; i++) {\r\n                let link = links[i];\r\n                link.attr('line/stroke', '#64A0C1');\r\n                let linkView = paper.findViewByModel(link);\r\n                highlighters.mask.remove(linkView);\r\n            }\r\n        };\r\n\r\n        paper.unfreeze();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const graph = props.editorGraph;\r\n        const paper = props.editorPaper;\r\n        if (graph && paper) {\r\n            if (currentId) {\r\n                let cell = graph.getCell(currentId);\r\n                if (cell && !cell.isLink()) {\r\n                    cell.attr({\r\n                        ...cell.attributes.attrs,\r\n                        ...props.cellMetaData\r\n                    });\r\n\r\n                    cell.resize(props.cellSize.width, props.cellSize.height);\r\n                }\r\n            }\r\n        }\r\n    }, [props.cellSize, props.cellMetaData, props.editorGraph, props.editorPaper]);\r\n\r\n    return (\r\n        <div className=\"diagram-editor\" ref={canvas}></div>\r\n    );\r\n}","import { useState } from 'react';\r\nimport ComponentSelector from '../ComponentList/ComponentList';\r\nimport ComponentMetaEditor from '../ComponentMetaEditor/ComponentMetaEditor';\r\nimport DiagramEditor from '../DiagramEditor/DiagramEditor';\r\nimport './AppWrapper.scss';\r\n\r\nexport default function AppWrapper (props) {\r\n    const [editorPaper, setEditorPaper] = useState(null);\r\n    const [cellType, setCellType] = useState(null);\r\n    const [cellMetaData, setCellMetaData] = useState({});\r\n    const [cellSize, setCellSize] = useState({});\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <ComponentSelector \r\n                editorGraph={props.editorGraph}\r\n                editorPaper={editorPaper}\r\n            />\r\n            <DiagramEditor\r\n                editorGraph={props.editorGraph}\r\n                setEditorGraph={props.setEditorGraph}\r\n                editorPaper={editorPaper}\r\n                setEditorPaper={setEditorPaper}\r\n                setCellType={setCellType}\r\n                cellMetaData={cellMetaData}\r\n                setCellMetaData={setCellMetaData}\r\n                cellSize={cellSize}\r\n                setCellSize={setCellSize}\r\n            />\r\n            <ComponentMetaEditor\r\n                cellType={cellType}\r\n                cellMetaData={cellMetaData}\r\n                setCellMetaData={setCellMetaData}\r\n                cellSize={cellSize}\r\n                setCellSize={setCellSize}\r\n            />\r\n        </div>\r\n    );\r\n}","export const ExportType = {\r\n    JSON: 'json',\r\n    // HTML: 'html',\r\n    // PNG: 'png',\r\n    // JPEG: 'jpeg'\r\n};\r\n\r\nexport const DiagramType = {\r\n    ARCHITECTURE: 'ARCHITECTURE',\r\n    DECISIONTREE: 'DECISIONTREE'\r\n};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M0 32.875L0.479167 37.5L3.58417 34.2917L8.89333 18.4584C7.59 18.1042 6.44 17.3959 5.50083 16.4167L0 32.875ZM16.1192 16.4167C15.18 17.3959 14.0108 18.1042 12.7267 18.4584L18.0358 34.2917L21.1408 37.5L21.6392 32.875L16.1192 16.4167ZM16.445 11.6667C17.02 8.4167 15.295 5.5417 12.7267 4.5417V2.08336C12.7267 0.93753 11.8642 3.05176e-05 10.81 3.05176e-05C9.75583 3.05176e-05 8.89333 0.93753 8.89333 2.08336V4.5417C6.67 5.4167 5.06 7.70836 5.06 10.4167C5.06 14.25 8.24167 17.2917 11.8833 16.5625C14.145 16.1042 16.0042 14.125 16.445 11.6667ZM10.81 12.5C9.75583 12.5 8.89333 11.5625 8.89333 10.4167C8.89333 9.27086 9.75583 8.33336 10.81 8.33336C11.8642 8.33336 12.7267 9.27086 12.7267 10.4167C12.7267 11.5625 11.8642 12.5 10.81 12.5Z\",\n  fill: \"#DDDDDDBF\"\n});\n\nfunction SvgArchitectureIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 22,\n    height: 28,\n    viewBox: \"0 0 22 38\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArchitectureIcon);\nexport default __webpack_public_path__ + \"static/media/ArchitectureIcon.3fe65492.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M39.6484 17.3091L35 12.9512V4.01562C35 3.69824 34.8763 3.42358 34.6289 3.19165C34.3815 2.95972 34.0885 2.84375 33.75 2.84375H18.7891C18.0078 2.13574 16.9531 1.56812 15.625 1.14087C14.2969 0.713623 12.8385 0.5 11.25 0.5C8.82812 0.5 6.76432 0.957764 5.05859 1.87329C3.35286 2.78882 2.5 3.89355 2.5 5.1875C2.5 6.35938 3.21615 7.37866 4.64844 8.24536C6.08073 9.11206 7.86458 9.63086 10 9.80176V14.5625H2.5C1.82292 14.5625 1.23698 14.7944 0.742188 15.2583C0.247396 15.7222 0 16.2715 0 16.9062V21.5938C0 22.2529 0.247396 22.8083 0.742188 23.26C1.23698 23.7117 1.82292 23.9375 2.5 23.9375H10V28.6982C7.86458 28.8691 6.08073 29.3879 4.64844 30.2546C3.21615 31.1213 2.5 32.1406 2.5 33.3125C2.5 34.6064 3.35286 35.7112 5.05859 36.6267C6.76432 37.5422 8.82812 38 11.25 38C13.6719 38 15.7357 37.5422 17.4414 36.6267C19.1471 35.7112 20 34.6064 20 33.3125C20 32.1406 19.2839 31.1213 17.8516 30.2546C16.4193 29.3879 14.6354 28.8691 12.5 28.6982V23.9375H20C20.7031 23.9375 21.2956 23.7117 21.7773 23.26C22.2591 22.8083 22.5 22.2529 22.5 21.5938V19.25H28.2031L32.8906 23.6445C33.125 23.8643 33.4049 23.9741 33.7305 23.9741C34.056 23.9741 34.3359 23.8643 34.5703 23.6445L39.6484 18.8838C39.8828 18.6641 40 18.4016 40 18.0964C40 17.7913 39.8828 17.5288 39.6484 17.3091ZM20 14.5625H12.5V9.80176C14.6354 9.63086 16.4193 9.11206 17.8516 8.24536C19.2839 7.37866 20 6.35938 20 5.1875H32.5V12.9146L28.2422 16.9062H22.5C22.5 16.2715 22.2591 15.7222 21.7773 15.2583C21.2956 14.7944 20.7031 14.5625 20 14.5625Z\",\n  fill: \"#DDDDDDBF\"\n});\n\nfunction SvgDecisionTreeIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 40,\n    height: 28,\n    viewBox: \"0 0 40 38\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDecisionTreeIcon);\nexport default __webpack_public_path__ + \"static/media/DecisionTreeIcon.61c56d55.svg\";\nexport { ForwardRef as ReactComponent };","import { ExportType } from '../../../utils/Types';\r\nimport { useRef, useState } from 'react';\r\nimport './Export.scss';\r\n\r\nexport default function Export (props) {\r\n    const [showExportMenu, setShowExportMenu] = useState(false);\r\n    const hiddenDownloadButton = useRef(null);\r\n\r\n    const toggleShowExportMenu = () => {\r\n        setShowExportMenu(showExportMenu => !showExportMenu);\r\n    };\r\n\r\n    const exportAs = (exportType) => {\r\n        // Code to export diagram\r\n        let outputJSON;\r\n        let outputContent;\r\n\r\n        if (props.editorGraph) {\r\n            outputJSON = props.editorGraph.toJSON();\r\n            outputContent = JSON.stringify(outputJSON, null, 4); // Default is JSON type\r\n\r\n            // TODO: Add some more logic to support differect export types\r\n\r\n            const outputBlob = new Blob([outputContent]);\r\n            const outputFileURL = URL.createObjectURL(outputBlob);\r\n\r\n            hiddenDownloadButton.current.href = outputFileURL;\r\n            hiddenDownloadButton.current.download = 'Diagraam.' + exportType;\r\n            hiddenDownloadButton.current.click();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"export-as-selector\">\r\n            <a className=\"display-none\" ref={hiddenDownloadButton}></a>\r\n            <div className=\"export-as-label\" onClick={toggleShowExportMenu}>Export as</div>\r\n            <div className={'export-select-options' + (!showExportMenu? ' display-none' : '')}>\r\n                {\r\n                    Object.keys(ExportType).map(key => (\r\n                        <div className='select-option' key={key} onClick={() => exportAs(ExportType[key])}>Export as {key}</div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { DiagramType } from '../../utils/Types';\r\nimport { ReactComponent as ArchitectureIcon } from '../../assets/icons/ArchitectureIcon.svg';\r\nimport { ReactComponent as DecisionTreeIcon } from '../../assets/icons/DecisionTreeIcon.svg';\r\nimport Export from './Export/Export';\r\nimport './NavBar.scss';\r\n\r\nexport default function NavBar (props) {\r\n    const navBarLeftIcons = [\r\n        { type: DiagramType.ARCHITECTURE, label: <ArchitectureIcon />, title: 'Architecture Diagram' },\r\n        { type: DiagramType.DECISIONTREE, label: <DecisionTreeIcon />, title: 'Decision Tree Diagram' }\r\n    ];\r\n\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"left\">\r\n                <div className=\"icon logo\">D</div>\r\n                {\r\n                    navBarLeftIcons.map(icon => (\r\n                        <div \r\n                            className={'icon hoverable' + (icon.type === props.diagramType? ' active' : '')}\r\n                            title={icon.title}\r\n                            onClick={() => props.setDiagramType(icon.type)}\r\n                            key={icon.title}\r\n                        >\r\n                            {icon.label}\r\n                        </div>\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n            <div className=\"middle\">\r\n                Diagraam\r\n            </div>\r\n            <div className=\"right\">\r\n                <Export \r\n                    editorGraph={props.editorGraph}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useState } from 'react';\r\nimport './App.scss';\r\nimport AppWrapper from './components/AppWrapper/AppWrapper';\r\nimport DiagramEditor from './components/DiagramEditor/DiagramEditor';\r\nimport NavBar from './components/NavBar/NavBar';\r\nimport { DiagramType } from './utils/Types';\r\n\r\nfunction App() {\r\n  const [diagramType, setDiagramType] = useState(DiagramType.ARCHITECTURE);\r\n  const [editorGraph, setEditorGraph] = useState(null);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar \r\n        diagramType={diagramType}\r\n        setDiagramType={setDiagramType}\r\n        editorGraph={editorGraph}\r\n      />\r\n      <AppWrapper \r\n        editorGraph={editorGraph}\r\n        setEditorGraph={setEditorGraph}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}